---

- name: Add new dotprofile (DB)
  template: src=dotprofile-db.j2 dest={{ oracle_user_home }}/.bash_profile owner={{ oracle_user }} group={{ oracle_group }} mode=775 backup=yes
  with_items: "{{oracle_databases}}"
  tags:
  - dotprofiledb

- name: Create stage directory (base)
  file: dest={{ oracle_stage }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
  tags:
    - directoriesdb

- name: Create stage directory (version specific)
  file: dest={{ oracle_stage }}/{{ item[0].version }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
  with_nested:
      - "{{ oracle_sw_image_db }}"
      - "{{ oracle_databases }}"
  when: item[0].version == item[1].oracle_version_db
  tags:
    - directoriesdb

- name: Create rsp stage directory
  file: dest={{ oracle_rsp_stage }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
  tags:
    - directoriesdb

- name: Create ORACLE_BASE directory
  file: dest={{ oracle_base }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
  tags:
    - directoriesdb

- name: Create cfgtoollogs directory
  file: dest={{ oracle_base }}/cfgtoollogs mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory recurse=yes
  become: yes
  tags:
    - directoriesdb

# - name: Create admin directory
#   file: dest={{ oracle_base }}/admin mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
#   become: yes
#   tags:
#     - directoriesdb

# - name: Create audit directory
#   file: dest={{ oracle_base }}/audit mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
#   become: yes
#   tags:
#     - directoriesdb

- name: Transfer oracle installfiles to server (www)
  get_url: url={{ oracle_sw_source_www }}/{{ item[0].filename }} dest={{ oracle_stage }} mode=775
  with_nested:
    - "{{oracle_sw_image_db}}"
    - "{{oracle_databases}}"
  become: true
  become_user: "{{ oracle_user }}"
  when: item[0].version == item[1].oracle_version_db 
  tags:
    - oradbsw

- name: Extract files to stage-area
  unarchive: src={{ oracle_stage }}/{{ item[0].filename }} dest={{ oracle_stage }}/{{ item[0].version }} copy=no
  with_nested:
    - "{{oracle_sw_image_db}}"
    - "{{oracle_databases}}"
  become: yes
  become_user: "{{ oracle_user }}"
  when: item[0].version == item[1].oracle_version_db
  tags:
    - oradbswunpack

- name: Setup response file for install (DB)
  template: src=db-install.rsp.{{ item.oracle_version_db }}.j2 dest={{ oracle_rsp_stage }}/{{ oracle_db_responsefile }}
  with_items:
    - "{{oracle_databases}}"
  become: true
  become_user: "{{ oracle_user }}"
  tags:
    - responsefileswdb

- name: Create script to install Database Server
  template: src=run-db-install.sh.j2 dest={{ oracle_rsp_stage }}/{{ oracle_db_run_install }} mode=755
  with_items:
    - "{{oracle_databases}}"
  become: true
  become_user: "{{ oracle_user }}"
  tags:
    - responsefileswdb

- name: Install Oracle Database Server
  #shell: "{{ oracle_stage_install }}/{{ item.0.oracle_version_db }}/database/runInstaller -responseFile {{ oracle_rsp_stage }}/{{ oracle_db_responsefile }} -ignorePrereq -ignoreSysPrereqs -silent -waitforcompletion"
  shell: "{{ oracle_rsp_stage }}/{{ oracle_db_run_install }}"
  with_items:
    - "{{oracle_databases}}"
  become: yes
  become_user: "{{ oracle_user }}"
  tags:
    - oradbinstall
  register: oradbinstall

# - debug: var=item
#   with_items:
#       #- "{{ oradbinstall.results }}"
#       - "{{ oradbinstall.results|map(attribute='stdout_lines')|list }}"
#   when: master_node
#   tags:
#     - oradbinstall
#   ignore_errors: true

- name: Run oraInstroot script after installation
  shell: "{{ oracle_inventory_loc }}/orainstRoot.sh"
  tags:
    - runroot

- name: Run root script after installation
  shell: "{{ oracle_home_db }}/root.sh"
  with_items:
    - "{{oracle_databases}}"
  tags:
    - runroot